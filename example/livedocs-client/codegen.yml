# This file configures GraphQL Code Generator to create TypeScript types from our GraphQL schema
# It's tailored to work with our strict TypeScript and ESLint configuration

overwrite: true
schema: './schema/schema.graphql'
generates:
  src/generated/graphql.ts:
    plugins:
      - 'typescript'
    config:
      # Use 'import type' instead of 'import' for better tree-shaking
      useTypeImports: true

      # Define custom scalar types to match our TypeScript types
      scalars:
        DateTime: string
        UUID: string
        EmailAddress: string

      # Generate enums as TypeScript enums for better type safety
      enumsAsTypes: false
      enumsAsConst: false
      constEnums: false
      enumsAsEnum: true

      # Generate read-only types to prevent accidental mutations
      immutableTypes: false

      # Use 'T | null' for nullable fields, matching our strict null checks
      maybeValue: T | null

      # Don't generate optional fields to ensure all required fields are provided
      avoidOptionals: true

      # Ensure scalar types are strictly typed
      strictScalars: true

      # Skip generating __typename field to reduce noise in types
      skipTypename: true

      # Remove duplicate fragments to reduce generated code size
      dedupeFragments: true

      # Generate types for all schema elements, not just those used in operations
      onlyOperationTypes: false

      # Use PascalCase for type names to match our naming conventions
      namingConvention:
        typeNames: pascal-case#pascalCase
        enumValues: keep

      # Generate types as exported to allow usage across the project
      noExport: false

      # Avoid using index signatures for better type safety
      useIndexSignature: false

      # Use interfaces instead of types to match our ESLint rules
      declarationKind: 'interface'

      # Add underscore to args type names to avoid naming conflicts
      addUnderscoreToArgsType: true

      # Allow null or undefined for input fields for more precise typing
      inputMaybeValue: T | null | undefined

    # Run Prettier and ESLint on the generated file to ensure code style consistency
    hooks:
      afterOneFileWrite:
        - prettier --write
        - eslint --fix
