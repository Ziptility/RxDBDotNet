name: Pull Request
on:
  pull_request:
    branches: [ main ]
    types: [opened, reopened, synchronize]
jobs:
  build-and-test-pr:
    runs-on: windows-latest
    steps:
    - name: Check Docker status and switch to Linux containers if necessary
      shell: pwsh
      run: |
        Write-Host "Checking Docker status..."
        $dockerInfo = docker info --format '{{.OSType}}'
        if ($dockerInfo -eq 'linux') {
          Write-Host "Docker is already using Linux containers."
        } else {
          Write-Host "Docker is not using Linux containers. Attempting to switch..."
          # Stop Docker service
          Stop-Service docker
          # Set Docker to use Linux containers
          $daemonJson = Get-Content 'C:\ProgramData\Docker\config\daemon.json' -Raw | ConvertFrom-Json
          $daemonJson | Add-Member -Name 'osType' -Value 'linux' -MemberType NoteProperty -Force
          $daemonJson | ConvertTo-Json | Set-Content 'C:\ProgramData\Docker\config\daemon.json'
          # Start Docker service
          Start-Service docker
          # Wait for Docker to be ready
          docker ps > $null
          while ($LASTEXITCODE -ne 0) {
            Write-Host "Waiting for Docker to be ready..."
            Start-Sleep -Seconds 5
            docker ps > $null
          }
        }

    - name: Verify Docker is using Linux containers
      shell: pwsh
      run: |
        $osType = docker info --format '{{.OSType}}'
        Write-Host "Docker OS Type: $osType"
        if ($osType -ne 'linux') {
          Write-Error "Docker is not using Linux containers"
          exit 1
        }

    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    - name: Install .NET Aspire workload
      run: dotnet workload install aspire
    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
      
    - name: Install dependencies and build the client
      working-directory: example/livedocs-client
      run: |
        npm ci
        npm run build
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: Test with coverage
      run: dotnet test ./tests/RxDBDotNet.Tests/RxDBDotNet.Tests.csproj --configuration Release --collect:"XPlat Code Coverage" --settings coverlet.runsettings
      timeout-minutes: 5
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4.0.1
      with:
        files: ./tests/RxDBDotNet.Tests/TestResults/*/coverage.lcov
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}
      
    - name: Auto-label the PR
      uses: release-drafter/release-drafter@v5
      with:
        config-name: release-drafter.yml
        disable-releaser: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}